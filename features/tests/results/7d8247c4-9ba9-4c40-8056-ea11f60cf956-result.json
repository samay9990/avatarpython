{"name": "test_verify_that_user_can_edit_claim_2[Theft-Liability-Adam Hunt-GORDON-Open]", "status": "broken", "statusDetails": {"message": "Exception: ('Exception occured while verifying successsful toast message -->', Exception('Exception occured while fetching element text -->', Exception('Exception occured while waiting for element to be located :', \"xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\", ' --> ', Exception(\"Error occurred while getting the element :xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']-->\", NoSuchElementException('no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\\'Toastify__toast Toastify__toast--success\\']//div[@role=\\'alert\\']\"}\\n  (Session info: chrome=85.0.4183.83)', None, None)))))", "trace": "self = <features.common_utilities.driver_handler_2.DriverHandle object at 0x03F49628>\npstr_element_locater = \"xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\"\n\n    def get_element(self, pstr_element_locater):\n        try:\n            split_locater = pstr_element_locater.split(\"=\", 1)\n            locater_type_by = self.get_by(split_locater[0])\n            locater_identifer = split_locater[1]\n>           return self.get_driver().find_element(by=locater_type_by, value=locater_identifer)\n\n..\\common_utilities\\driver_handler_2.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a092877daf1ec63f4e3cdf43fd845fca\")>, by = 'xpath'\nvalue = \"//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\"\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a092877daf1ec63f4e3cdf43fd845fca\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\"}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x03F7EBE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...76466A14+36]\\\\n\\\\tRtlInitializeExceptionChain [0x76F0AD8F+143]\\\\n\\\\tRtlInitializeExceptionChain [0x76F0AD5A+90]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\"}\nE         (Session info: chrome=85.0.4183.83)\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <features.common_utilities.driver_handler_2.DriverHandle object at 0x03F49628>\npstr_locater = \"xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\", pint_time_to_wait = 20\n\n    def wait_for_element_to_dispaly(self, pstr_locater, pint_time_to_wait=20):\n        try:\n            count = 0;\n>           while not self.get_element(pstr_locater).is_displayed():\n\n..\\common_utilities\\driver_handler_2.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <features.common_utilities.driver_handler_2.DriverHandle object at 0x03F49628>\npstr_element_locater = \"xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\"\n\n    def get_element(self, pstr_element_locater):\n        try:\n            split_locater = pstr_element_locater.split(\"=\", 1)\n            locater_type_by = self.get_by(split_locater[0])\n            locater_identifer = split_locater[1]\n            return self.get_driver().find_element(by=locater_type_by, value=locater_identifer)\n        except Exception as e:\n>           raise Exception(\"Error occurred while getting the element :\" + pstr_element_locater + \"-->\", e)\nE           Exception: (\"Error occurred while getting the element :xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']-->\", NoSuchElementException('no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\\'Toastify__toast Toastify__toast--success\\']//div[@role=\\'alert\\']\"}\\n  (Session info: chrome=85.0.4183.83)', None, None))\n\n..\\common_utilities\\driver_handler_2.py:77: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <features.common_utilities.driver_handler_2.DriverHandle object at 0x03F49628>\npstr_locater = \"xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\", pint_wait_for_element = 20\n\n    def get_element_text(self, pstr_locater, pint_wait_for_element=20):\n        try:\n>           self.wait_for_element_to_dispaly(pstr_locater, pint_wait_for_element)\n\n..\\common_utilities\\driver_handler_2.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <features.common_utilities.driver_handler_2.DriverHandle object at 0x03F49628>\npstr_locater = \"xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\", pint_time_to_wait = 20\n\n    def wait_for_element_to_dispaly(self, pstr_locater, pint_time_to_wait=20):\n        try:\n            count = 0;\n            while not self.get_element(pstr_locater).is_displayed():\n                time.sleep(1)\n                count+=1\n                if count > pint_time_to_wait:\n                    break;\n    \n            WebDriverWait(self.get_driver(), pint_time_to_wait).until(EC.visibility_of(self.get_element(pstr_locater)))\n        except Exception as e:\n>           raise Exception(\"Exception occured while waiting for element to be located :\", pstr_locater, \" --> \", e)\nE           Exception: ('Exception occured while waiting for element to be located :', \"xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\", ' --> ', Exception(\"Error occurred while getting the element :xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']-->\", NoSuchElementException('no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\\'Toastify__toast Toastify__toast--success\\']//div[@role=\\'alert\\']\"}\\n  (Session info: chrome=85.0.4183.83)', None, None)))\n\n..\\common_utilities\\driver_handler_2.py:96: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <features.business_logic.avatar_toast_messages.AvatarToastMessages object at 0x03F490B8>, pstr_expected_messsage = 'Claim details updated successfully'\n\n    def verify_successful_toast_message(self,pstr_expected_messsage):\n        '''\n        This method is used to verify toast message\n        :param pstr_expected_messsage: Expected message\n        :return:\n        '''\n        try:\n>           actual_message = self.driver_handler.get_element_text(self.toast_locaters.successful_toast_alert)\n\n..\\business_logic\\avatar_toast_messages.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <features.common_utilities.driver_handler_2.DriverHandle object at 0x03F49628>\npstr_locater = \"xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\", pint_wait_for_element = 20\n\n    def get_element_text(self, pstr_locater, pint_wait_for_element=20):\n        try:\n            self.wait_for_element_to_dispaly(pstr_locater, pint_wait_for_element)\n            return self.get_element(pstr_locater).text\n        except Exception as e:\n>           raise Exception(\"Exception occured while fetching element text -->\", e)\nE           Exception: ('Exception occured while fetching element text -->', Exception('Exception occured while waiting for element to be located :', \"xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\", ' --> ', Exception(\"Error occurred while getting the element :xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']-->\", NoSuchElementException('no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\\'Toastify__toast Toastify__toast--success\\']//div[@role=\\'alert\\']\"}\\n  (Session info: chrome=85.0.4183.83)', None, None))))\n\n..\\common_utilities\\driver_handler_2.py:141: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_verify_that_user_can_edit_claim_2[Theft-Liability-Adam Hunt-GORDON-Open]>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:166: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    step_func(**kwargs)\ntest_avatar_editclaim.py:110: in verify_green_toast_message\n    assert avatartoast.verify_successful_toast_message(expected_message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <features.business_logic.avatar_toast_messages.AvatarToastMessages object at 0x03F490B8>, pstr_expected_messsage = 'Claim details updated successfully'\n\n    def verify_successful_toast_message(self,pstr_expected_messsage):\n        '''\n        This method is used to verify toast message\n        :param pstr_expected_messsage: Expected message\n        :return:\n        '''\n        try:\n            actual_message = self.driver_handler.get_element_text(self.toast_locaters.successful_toast_alert)\n            if actual_message.strip() == pstr_expected_messsage.strip():\n                return True\n            else:\n                print(\"ACTUAL MESSAGE :\",actual_message,\",EXPECTED MESSAGE:\",pstr_expected_messsage)\n                return False\n        except Exception as e:\n>           raise Exception(\"Exception occured while verifying successsful toast message -->\",e)\nE           Exception: ('Exception occured while verifying successsful toast message -->', Exception('Exception occured while fetching element text -->', Exception('Exception occured while waiting for element to be located :', \"xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']\", ' --> ', Exception(\"Error occurred while getting the element :xpath=//div[@class='Toastify__toast Toastify__toast--success']//div[@role='alert']-->\", NoSuchElementException('no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\\'Toastify__toast Toastify__toast--success\\']//div[@role=\\'alert\\']\"}\\n  (Session info: chrome=85.0.4183.83)', None, None)))))\n\n..\\business_logic\\avatar_toast_messages.py:31: Exception"}, "description": "TestCases/claim_edit.feature: Verify that user can edit claim - 2", "attachments": [{"name": "screenshot", "source": "7814606f-d74f-4a64-a1c7-e667ba85ea70-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "b22d8ce6-77de-4180-a1bd-f1db722b64cc-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "claim_type", "value": "'Theft'"}, {"name": "loss_type", "value": "'Liability'"}, {"name": "service_rep", "value": "'Adam Hunt'"}, {"name": "event_name", "value": "'GORDON'"}, {"name": "claim_status", "value": "'Open'"}], "start": 1599284976989, "stop": 1599285050788, "uuid": "e9137e21-f190-46ad-8c61-9e9ce92a2f68", "historyId": "c1dc4c004c171f91e2a9b856acd8740e", "testCaseId": "91d8947c26183357068a9e961ec6557c", "fullName": "features.tests.test_avatar_editclaim#test_verify_that_user_can_edit_claim_2", "labels": [{"name": "tag", "value": "web"}, {"name": "tag", "value": "claims"}, {"name": "tag", "value": "p1"}, {"name": "tag", "value": "@pytest.mark.usefixtures('event_name', 'claim_type', 'service_rep', 'claim_status', 'loss_type')"}, {"name": "parentSuite", "value": "features.tests"}, {"name": "suite", "value": "test_avatar_editclaim"}, {"name": "host", "value": "WIN-T79L21LL3M3"}, {"name": "thread", "value": "5328-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "features.tests.test_avatar_editclaim"}]}