{"name": "test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]", "status": "broken", "statusDetails": {"message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: When \"User changes the claim status open to <claim_status_open>\". Line 35 in scenario \"Verify that user can edit claim - 2\" in the feature \"C:\\Users\\samay\\PycharmProjects\\pytestbdddemo\\pytestbdddemo\\features\\tests\\TestCases\\claim_edit.feature", "trace": "self = <FixtureRequest for <Function test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]>>\nargname = 'pytestbdd_when_User changes the claim status open to <claim_status_open>'\n\n    def _get_active_fixturedef(\n        self, argname: str\n    ) -> Union[\"FixtureDef\", PseudoFixtureDef]:\n        try:\n>           return self._fixture_defs[argname]\nE           KeyError: 'pytestbdd_when_User changes the claim status open to <claim_status_open>'\n\n..\\..\\..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:589: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]>>\nstep = <pytest_bdd.feature.Step object at 0x03D15388>, scenario = <pytest_bdd.feature.Scenario object at 0x03D15238>, encoding = 'utf-8'\n\n    def _find_step_function(request, step, scenario, encoding):\n        \"\"\"Match the step defined by the regular expression pattern.\n    \n        :param request: PyTest request object.\n        :param step: Step.\n        :param scenario: Scenario.\n    \n        :return: Function of the step.\n        :rtype: function\n        \"\"\"\n        name = step.name\n        try:\n            # Simple case where no parser is used for the step\n>           return request.getfixturevalue(get_step_fixture_name(name, step.type, encoding))\n\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <FixtureRequest for <Function test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]>>\nargname = 'pytestbdd_when_User changes the claim status open to <claim_status_open>'\n\n    def getfixturevalue(self, argname: str) -> Any:\n        \"\"\" Dynamically run a named fixture function.\n    \n        Declaring fixtures via function argument is recommended where possible.\n        But if you can only decide whether to use another fixture at test\n        setup time, you may use this function to retrieve it inside a fixture\n        or test function body.\n    \n        :raise pytest.FixtureLookupError:\n            If the given fixture could not be found.\n        \"\"\"\n>       fixturedef = self._get_active_fixturedef(argname)\n\n..\\..\\..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:581: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <FixtureRequest for <Function test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]>>\nargname = 'pytestbdd_when_User changes the claim status open to <claim_status_open>'\n\n    def _get_active_fixturedef(\n        self, argname: str\n    ) -> Union[\"FixtureDef\", PseudoFixtureDef]:\n        try:\n            return self._fixture_defs[argname]\n        except KeyError:\n            try:\n>               fixturedef = self._getnextfixturedef(argname)\n\n..\\..\\..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:592: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <FixtureRequest for <Function test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]>>\nargname = 'pytestbdd_when_User changes the claim status open to <claim_status_open>'\n\n    def _getnextfixturedef(self, argname: str) -> \"FixtureDef\":\n        fixturedefs = self._arg2fixturedefs.get(argname, None)\n        if fixturedefs is None:\n            # we arrive here because of a dynamic call to\n            # getfixturevalue(argname) usage which was naturally\n            # not known at parsing/collection time\n            assert self._pyfuncitem.parent is not None\n            parentid = self._pyfuncitem.parent.nodeid\n            fixturedefs = self._fixturemanager.getfixturedefs(argname, parentid)\n            # TODO: Fix this type ignore. Either add assert or adjust types.\n            #       Can this be None here?\n            self._arg2fixturedefs[argname] = fixturedefs  # type: ignore[assignment]\n        # fixturedefs list is immutable so we maintain a decreasing index\n        index = self._arg2index.get(argname, 0) - 1\n        if fixturedefs is None or (-index > len(fixturedefs)):\n>           raise FixtureLookupError(argname, self)\nE           _pytest.fixtures.FixtureLookupError: ('pytestbdd_when_User changes the claim status open to <claim_status_open>', <FixtureRequest for <Function test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]>>)\n\n..\\..\\..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:484: FixtureLookupError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:137: in _execute_scenario\n    step_func = _find_step_function(request, step, scenario, encoding=encoding)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]>>\nstep = <pytest_bdd.feature.Step object at 0x03D15388>, scenario = <pytest_bdd.feature.Scenario object at 0x03D15238>, encoding = 'utf-8'\n\n    def _find_step_function(request, step, scenario, encoding):\n        \"\"\"Match the step defined by the regular expression pattern.\n    \n        :param request: PyTest request object.\n        :param step: Step.\n        :param scenario: Scenario.\n    \n        :return: Function of the step.\n        :rtype: function\n        \"\"\"\n        name = step.name\n        try:\n            # Simple case where no parser is used for the step\n            return request.getfixturevalue(get_step_fixture_name(name, step.type, encoding))\n        except pytest_fixtures.FixtureLookupError:\n            try:\n                # Could not find a fixture with the same name, let's see if there is a parser involved\n                name = find_argumented_step_fixture_name(name, step.type, request._fixturemanager, request)\n                if name:\n                    return request.getfixturevalue(name)\n                raise\n            except pytest_fixtures.FixtureLookupError:\n>               raise exceptions.StepDefinitionNotFoundError(\n                    u\"\"\"Step definition is not found: {step}.\"\"\"\n                    \"\"\" Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{feature.filename}\"\"\".format(\n                        step=step, scenario=scenario, feature=scenario.feature\n                    )\n                )\nE               pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: When \"User changes the claim status open to <claim_status_open>\". Line 35 in scenario \"Verify that user can edit claim - 2\" in the feature \"C:\\Users\\samay\\PycharmProjects\\pytestbdddemo\\pytestbdddemo\\features\\tests\\TestCases\\claim_edit.feature\n\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:86: StepDefinitionNotFoundError"}, "description": "TestCases/claim_edit.feature: Verify that user can edit claim - 2", "attachments": [{"name": "stdout", "source": "da0f41a6-bb02-4c59-9fe8-bd6ff6257190-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "claim_type", "value": "'Fire Loss'"}, {"name": "loss_type", "value": "'Liability'"}, {"name": "service_rep", "value": "'Adam Hunt'"}, {"name": "event_name", "value": "'GORDON'"}, {"name": "claim_status_open", "value": "'Open'"}], "start": 1599142455208, "stop": 1599142508686, "uuid": "3f0b6cdd-c91d-4c66-8178-faf11689b09c", "historyId": "f3fd43129060ecb17ae24a6f4befdf3c", "testCaseId": "91d8947c26183357068a9e961ec6557c", "fullName": "features.tests.test_avatar_editclaim#test_verify_that_user_can_edit_claim_2", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('loss_type', 'claim_status_open', 'service_rep', 'event_name', 'claim_type')"}, {"name": "tag", "value": "web"}, {"name": "parentSuite", "value": "features.tests"}, {"name": "suite", "value": "test_avatar_editclaim"}, {"name": "host", "value": "WIN-T79L21LL3M3"}, {"name": "thread", "value": "4580-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "features.tests.test_avatar_editclaim"}]}