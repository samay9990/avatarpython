{"name": "test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]", "status": "broken", "statusDetails": {"message": "Exception: ('Exception occured while selecting claim type from dropdown -->', Exception('Exception occured while selecting visible text from dropdown -->', NoSuchElementException('Could not locate element with visible text: <claim_type>')))", "trace": "self = <features.common_utilities.driver_handler.DriverHandle object at 0x03579130>, pstr_locater = 'id=ClaimType_txt', pstr_visibletext = '<claim_type>'\n\n    def select_visible_text_from_dropdown(self,pstr_locater,pstr_visibletext):\n        try:\n            self.wait_for_element_to_dispaly(pstr_locater)\n            select_dropdown = Select(self.get_element(pstr_locater))\n>           select_dropdown.select_by_visible_text(pstr_visibletext)\n\n..\\common_utilities\\driver_handler.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.select.Select object at 0x035E9E98>, text = '<claim_type>'\n\n    def select_by_visible_text(self, text):\n        \"\"\"Select all options that display text matching the argument. That is, when given \"Bar\" this\n           would select an option like:\n    \n            <option value=\"foo\">Bar</option>\n    \n           :Args:\n            - text - The visible text to match against\n    \n            throws NoSuchElementException If there is no option with specisied text in SELECT\n           \"\"\"\n        xpath = \".//option[normalize-space(.) = %s]\" % self._escapeString(text)\n        opts = self._el.find_elements(By.XPATH, xpath)\n        matched = False\n        for opt in opts:\n            self._setSelected(opt)\n            if not self.is_multiple:\n                return\n            matched = True\n    \n        if len(opts) == 0 and \" \" in text:\n            subStringWithoutSpace = self._get_longest_token(text)\n            if subStringWithoutSpace == \"\":\n                candidates = self.options\n            else:\n                xpath = \".//option[contains(.,%s)]\" % self._escapeString(subStringWithoutSpace)\n                candidates = self._el.find_elements(By.XPATH, xpath)\n            for candidate in candidates:\n                if text == candidate.text:\n                    self._setSelected(candidate)\n                    if not self.is_multiple:\n                        return\n                    matched = True\n    \n        if not matched:\n>           raise NoSuchElementException(\"Could not locate element with visible text: %s\" % text)\nE           selenium.common.exceptions.NoSuchElementException: Message: Could not locate element with visible text: <claim_type>\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\select.py:140: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <features.business_logic.avatar_claims_intakepage.AvatarClaimsIntakePage object at 0x03579118>, pstr_claimtype = '<claim_type>'\n\n    def select_claim_type(self,pstr_claimtype):\n        '''\n        Select claim type\n        :param pstr_claimtype: claim type to select\n        :return:\n        '''\n        try:\n>           self.driver_handler.select_visible_text_from_dropdown(self.claimsintakepage_locaters.claimtype_selectbox, pstr_claimtype)\n\n..\\business_logic\\avatar_claims_intakepage.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <features.common_utilities.driver_handler.DriverHandle object at 0x03579130>, pstr_locater = 'id=ClaimType_txt', pstr_visibletext = '<claim_type>'\n\n    def select_visible_text_from_dropdown(self,pstr_locater,pstr_visibletext):\n        try:\n            self.wait_for_element_to_dispaly(pstr_locater)\n            select_dropdown = Select(self.get_element(pstr_locater))\n            select_dropdown.select_by_visible_text(pstr_visibletext)\n        except Exception as e:\n>           raise Exception(\"Exception occured while selecting visible text from dropdown -->\",e)\nE           Exception: ('Exception occured while selecting visible text from dropdown -->', NoSuchElementException('Could not locate element with visible text: <claim_type>'))\n\n..\\common_utilities\\driver_handler.py:123: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_verify_that_user_can_edit_claim_2[Fire Loss-Liability-Adam Hunt-GORDON-Open]>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:166: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    step_func(**kwargs)\ntest_avatar_editclaim.py:75: in change_claim_type_on_claim_intake_page\n    avatarClaimsIntakePage.select_claim_type(claim_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <features.business_logic.avatar_claims_intakepage.AvatarClaimsIntakePage object at 0x03579118>, pstr_claimtype = '<claim_type>'\n\n    def select_claim_type(self,pstr_claimtype):\n        '''\n        Select claim type\n        :param pstr_claimtype: claim type to select\n        :return:\n        '''\n        try:\n            self.driver_handler.select_visible_text_from_dropdown(self.claimsintakepage_locaters.claimtype_selectbox, pstr_claimtype)\n        except Exception as e:\n>           raise Exception(\"Exception occured while selecting claim type from dropdown -->\",e)\nE           Exception: ('Exception occured while selecting claim type from dropdown -->', Exception('Exception occured while selecting visible text from dropdown -->', NoSuchElementException('Could not locate element with visible text: <claim_type>')))\n\n..\\business_logic\\avatar_claims_intakepage.py:24: Exception"}, "description": "TestCases/claim_edit.feature: Verify that user can edit claim - 2", "attachments": [{"name": "screenshot", "source": "657f61d3-bfb4-4ffa-96c6-71000803e3fe-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "a38a1ecc-51d9-45de-81bb-2d6b5ff3d31c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "claim_type", "value": "'Fire Loss'"}, {"name": "loss_type", "value": "'Liability'"}, {"name": "service_rep", "value": "'Adam Hunt'"}, {"name": "event_name", "value": "'GORDON'"}, {"name": "claim_status_open", "value": "'Open'"}], "start": 1599141239962, "stop": 1599141311386, "uuid": "81178965-a249-4061-9e24-aaebc49578fa", "historyId": "f3fd43129060ecb17ae24a6f4befdf3c", "testCaseId": "91d8947c26183357068a9e961ec6557c", "fullName": "features.tests.test_avatar_editclaim#test_verify_that_user_can_edit_claim_2", "labels": [{"name": "tag", "value": "web"}, {"name": "tag", "value": "@pytest.mark.usefixtures('event_name', 'claim_type', 'service_rep', 'loss_type', 'claim_status_open')"}, {"name": "parentSuite", "value": "features.tests"}, {"name": "suite", "value": "test_avatar_editclaim"}, {"name": "host", "value": "WIN-T79L21LL3M3"}, {"name": "thread", "value": "6056-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "features.tests.test_avatar_editclaim"}]}