{"name": "test_verify_that_user_can_edit_claim", "status": "broken", "statusDetails": {"message": "Exception: ('Exception occured while selecting claim type from dropdown -->', Exception('Exception occured while selecting visible text from dropdown -->', StaleElementReferenceException('stale element reference: element is not attached to the page document\\n  (Session info: chrome=85.0.4183.83)', None, None)))", "trace": "self = <features.common_utilities.driver_handler.DriverHandle object at 0x03DA11F0>, pstr_locater = 'id=ClaimType_txt', pstr_visibletext = 'Theft'\n\n    def select_visible_text_from_dropdown(self,pstr_locater,pstr_visibletext):\n        try:\n            self.wait_for_element_to_dispaly(pstr_locater)\n>           select_dropdown = Select(self.get_element(pstr_locater))\n\n..\\common_utilities\\driver_handler.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.select.Select object at 0x03DF0DA8>\nwebelement = <selenium.webdriver.remote.webelement.WebElement (session=\"c74185435e680eca7e70d55fa78ff9a8\", element=\"4bd85b57-30dc-444d-aa78-d3e71859d1c6\")>\n\n    def __init__(self, webelement):\n        \"\"\"\n        Constructor. A check is made that the given element is, indeed, a SELECT tag. If it is not,\n        then an UnexpectedTagNameException is thrown.\n    \n        :Args:\n         - webelement - element SELECT element to wrap\n    \n        Example:\n            from selenium.webdriver.support.ui import Select \\n\n            Select(driver.find_element_by_tag_name(\"select\")).select_by_index(2)\n        \"\"\"\n>       if webelement.tag_name.lower() != \"select\":\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\select.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"c74185435e680eca7e70d55fa78ff9a8\", element=\"4bd85b57-30dc-444d-aa78-d3e71859d1c6\")>\n\n    @property\n    def tag_name(self):\n        \"\"\"This element's ``tagName`` property.\"\"\"\n>       return self._execute(Command.GET_ELEMENT_TAG_NAME)['value']\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"c74185435e680eca7e70d55fa78ff9a8\", element=\"4bd85b57-30dc-444d-aa78-d3e71859d1c6\")>\ncommand = 'getElementTagName', params = {'id': '4bd85b57-30dc-444d-aa78-d3e71859d1c6', 'sessionId': 'c74185435e680eca7e70d55fa78ff9a8'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c74185435e680eca7e70d55fa78ff9a8\")>, driver_command = 'getElementTagName'\nparams = {'id': '4bd85b57-30dc-444d-aa78-d3e71859d1c6'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x03DCBD48>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...76466A14+36]\\\\n\\\\tRtlInitializeExceptionChain [0x76F0AD8F+143]\\\\n\\\\tRtlInitializeExceptionChain [0x76F0AD5A+90]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=85.0.4183.83)\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <features.business_logic.avatar_claims_intakepage.AvatarClaimsIntakePage object at 0x03D8B580>, pstr_claimtype = 'Theft'\n\n    def select_claim_type(self,pstr_claimtype):\n        '''\n        Select claim type\n        :param pstr_claimtype: claim type to select\n        :return:\n        '''\n        try:\n>           self.driver_handler.select_visible_text_from_dropdown(self.claimsintakepage_locaters.claimtype_selectbox, pstr_claimtype)\n\n..\\business_logic\\avatar_claims_intakepage.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <features.common_utilities.driver_handler.DriverHandle object at 0x03DA11F0>, pstr_locater = 'id=ClaimType_txt', pstr_visibletext = 'Theft'\n\n    def select_visible_text_from_dropdown(self,pstr_locater,pstr_visibletext):\n        try:\n            self.wait_for_element_to_dispaly(pstr_locater)\n            select_dropdown = Select(self.get_element(pstr_locater))\n            select_dropdown.select_by_visible_text(pstr_visibletext)\n        except Exception as e:\n>           raise Exception(\"Exception occured while selecting visible text from dropdown -->\",e)\nE           Exception: ('Exception occured while selecting visible text from dropdown -->', StaleElementReferenceException('stale element reference: element is not attached to the page document\\n  (Session info: chrome=85.0.4183.83)', None, None))\n\n..\\common_utilities\\driver_handler.py:124: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_verify_that_user_can_edit_claim>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:166: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    step_func(**kwargs)\ntest_avatar_editclaim.py:66: in change_claim_type_on_claim_intake_page\n    avatarClaimsIntakePage.select_claim_type(claim_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <features.business_logic.avatar_claims_intakepage.AvatarClaimsIntakePage object at 0x03D8B580>, pstr_claimtype = 'Theft'\n\n    def select_claim_type(self,pstr_claimtype):\n        '''\n        Select claim type\n        :param pstr_claimtype: claim type to select\n        :return:\n        '''\n        try:\n            self.driver_handler.select_visible_text_from_dropdown(self.claimsintakepage_locaters.claimtype_selectbox, pstr_claimtype)\n        except Exception as e:\n>           raise Exception(\"Exception occured while selecting claim type from dropdown -->\",e)\nE           Exception: ('Exception occured while selecting claim type from dropdown -->', Exception('Exception occured while selecting visible text from dropdown -->', StaleElementReferenceException('stale element reference: element is not attached to the page document\\n  (Session info: chrome=85.0.4183.83)', None, None)))\n\n..\\business_logic\\avatar_claims_intakepage.py:24: Exception"}, "description": "TestCases/claim_edit.feature: Verify that user can edit claim", "attachments": [{"name": "screenshot", "source": "d969d9d7-5d9e-4750-8314-7de17e1b47a7-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "75393d4a-6d2b-458b-a300-c110e57b5aa0-attachment.txt", "type": "text/plain"}], "start": 1599125956291, "stop": 1599126002557, "uuid": "57d495cf-5f60-48d7-a8eb-b2b6242003dc", "historyId": "bab90ef6adb1c7329cc56df3b7b363a8", "testCaseId": "3937689eaa563fba726419cd0a94c22f", "fullName": "features.tests.test_avatar_editclaim#test_verify_that_user_can_edit_claim", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "tag", "value": "web"}, {"name": "parentSuite", "value": "features.tests"}, {"name": "suite", "value": "test_avatar_editclaim"}, {"name": "host", "value": "WIN-T79L21LL3M3"}, {"name": "thread", "value": "4404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "features.tests.test_avatar_editclaim"}]}